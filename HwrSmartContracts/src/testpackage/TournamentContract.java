package testpackage;

import java.io.File;
import java.math.BigInteger;
import java.util.Scanner;

import com.hrw.smarcontracts.AbstractContract;

import pojos.Asset;
import pojos.Transaction1;

/**
 * 
 * @author mpouma
 *
 */
public class TournamentContract extends AbstractContract {

	private int[] ownerchoice;
	private int[] opponentschoice;
	private int[] results;
	private BigInteger totaldeposit;
	boolean adressmerker1;
	boolean adressmerker2;
	private int count1;
	private int count2;

	public TournamentContract(String contractName, String ownerAdress, String partneradress, String assetID,
			BigInteger oDeposit, BigInteger pDeposit, int duration) {

		super(contractName, ownerAdress, partneradress, assetID, oDeposit, pDeposit);

		this.totaldeposit = (oDeposit.add(pDeposit));
		setContractTime(duration);

	}

	public TournamentContract(String contractName, String ownerAdress, String partneradress, BigInteger oDeposit,
			BigInteger pDeposit, int duration) {

		super(contractName, ownerAdress, partneradress, oDeposit, pDeposit);

		this.totaldeposit = (oDeposit.add(pDeposit));
		setContractTime(duration);

	}

	public void bett() {

		bettPlayerOne();
		bettPlayerTwo();

	}

	public void bettPlayerOne() {
		System.out.println("player one plays");
		String adress;
		System.out.println("please enter your adress for betting....");
		Scanner sc = new Scanner(System.in);
		adress = sc.next();
		while (!adress.equals(ownerAdress) && !adress.equals(partnerAdress)) {
			System.out.println("this player is not allowed for the game!");

			if (adress.equals(partnerAdress)) {
				System.out.println(" player one ist not allowed playing for player two! please give your own address");
				adress = sc.next();
			}
			adress = sc.next();

		}

		if (adress.equals(ownerAdress) && !hasAllreadyPlayed(adress)) {
			adressmerker1 = true;
			ownerchoice = new int[5];
			System.out.println("congratulations player one you have the permission to play!");
			System.out.print("please enter 5 number of the intervall [0,10]" + '\n'
					+ "please note that you have to guess the right position of the numbers generated by the engine. You win only if you guess more write positions as your opponents."
					+ '\n' + "in case of a draw game, the deposits will be refounds to each player good Luck");
			Scanner scan = new Scanner(System.in);
			for (int i = 0; i < ownerchoice.length; i++) {
				ownerchoice[i] = scan.nextInt();
			}
			System.out.println("thank you your bett are saved the results of the game will be available soon");
			System.out.println();

		}
	}

	public void bettPlayerTwo() {
		System.out.println("player two plays");
		String adress;
		System.out.println("please enter your adress for betting....");
		Scanner sc = new Scanner(System.in);
		adress = sc.next();
		while (!adress.equals(ownerAdress) && !adress.equals(partnerAdress)) {
			System.out.println("this player is not allowed for the game!");

			if (adress.equals(ownerAdress)) {
				System.out.println(" player two ist not allowed playing for player one! please give your own address");
				adress = sc.next();
			}
			adress = sc.next();

		}

		if (adress.equals(partnerAdress) && !hasAllreadyPlayed(adress)) {
			adressmerker2 = true;
			opponentschoice = new int[5];
			System.out.println("congratulations player two you have the permission to play!");
			System.out.print("please enter 5 number of the intervall [0,10]" + '\n'
					+ "please note that you have to guess the right position of the numbers generated by the engine. You win only if you guess more write positions as your opponents."
					+ '\n' + "in case of a draw game, the deposits will be refounds to each player good Luck");
			Scanner scan = new Scanner(System.in);
			for (int i = 0; i < ownerchoice.length; i++) {
				opponentschoice[i] = scan.nextInt();
			}
			System.out.println("thank you your bett are saved the results of the game will be available soon");
			System.out.println();

		}

	}

	public void computeResults() {

		for (int i = 0; i < results.length; i++) {
			if (results[i] == ownerchoice[i])
				count1++;
			if (results[i] == opponentschoice[i])
				count2++;
		}

		if (count1 > count2) {
			System.out.println("the winner is the Player with the adress:" + ownerAdress + "!!!!!");
			printResults();
			System.out.println("the winner earns the following sum:" + totaldeposit);
			setOwnerGain(totaldeposit);
			setOpponentsGain(BigInteger.valueOf((long) 0));
		}

		if (count1 < count2) {
			System.out.println("the winner is the Player with the address:" + partnerAdress + "!!!!!");
			printResults();
			System.out.println("the winner earns the following sum:" + totaldeposit);
			setOpponentsGain(totaldeposit);
			setOwnerGain(BigInteger.valueOf((long) 0));
		}

		if (count1 == count2) {
			System.out.println("oops we have a draw game!:" + "no winner !!!!!");
			printResults();
			System.out.println("the betts will be refound");
			setOwnerGain(ownerDeposit);
			setOpponentsGain(partnerDeposit);
		}

	}

	public void computeNumbers() {
		this.results = new int[5];
		for (int i = 0; i < results.length; i++) {
			results[i] = (int) (Math.random() * 11);
		}

	}

	public boolean hasAllreadyPlayed(String adress) {
		return (adress.equals(ownerAdress) && adressmerker1);
	}

	public void printResults() {
		String result = "";
		for (int i = 0; i < 5; i++) {
			result += results[i];
		}
		System.out.println("computed numbers:" + "" + result);
		System.out.println('\n');
		System.out.println("player                                                          points");
		System.out.println("----------------------------------------------------------------------");
		System.out.println();
		System.out.println("Player one:" + "                                                       " + count1);
		System.out.println("Player two:" + "                                                       " + count2);
	}

	@Override
	public void doContractsOperations() {
		this.computeNumbers();
		bett();

		computeResults();
//		printResults();

	}

}
